[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lexers",
        "importPath": "sphinx.highlighting",
        "description": "sphinx.highlighting",
        "isExtraImport": true,
        "detail": "sphinx.highlighting",
        "documentation": {
            "value": "\n```python\nimport sphinx.highlighting\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PhpLexer",
        "importPath": "pygments.lexers.web",
        "description": "pygments.lexers.web",
        "isExtraImport": true,
        "detail": "pygments.lexers.web",
        "documentation": {
            "value": "\n```python\nimport pygments.lexers.web\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#needs_sphinx",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.todo',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #needs_sphinx\n```\n\n```python\n\n\n```\n\n```python\n#needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.todo',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "extensions = [\n    'sphinx.ext.todo',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import extensions\n```\n\n```python\n\n\n```\n\n```python\nextensions = [\n    'sphinx.ext.todo',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import templates_path\n```\n\n```python\n\n\n```\n\n```python\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import source_suffix\n```\n\n```python\n\n\n```\n\n```python\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#source_encoding",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #source_encoding\n```\n\n```python\n\n\n```\n\n```python\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.0'",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import master_doc\n```\n\n```python\n\n\n```\n\n```python\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.0'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "project = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.0'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.0-alpha'",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import project\n```\n\n```python\n\n\n```\n\n```python\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.0'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.0-alpha'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "copyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.0'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.0-alpha'\n# The language for content autogenerated by Sphinx. Refer to documentation",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import copyright\n```\n\n```python\n\n\n```\n\n```python\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.0'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.0-alpha'\n# The language for content autogenerated by Sphinx. Refer to documentation\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "version = '1.0'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.0-alpha'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import version\n```\n\n```python\n\n\n```\n\n```python\nversion = '1.0'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.0-alpha'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "release = '1.0-alpha'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import release\n```\n\n```python\n\n\n```\n\n```python\nrelease = '1.0-alpha'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#language",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #language\n```\n\n```python\n\n\n```\n\n```python\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#today",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #today\n```\n\n```python\n\n\n```\n\n```python\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#today_fmt",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #today_fmt\n```\n\n```python\n\n\n```\n\n```python\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "exclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import exclude_patterns\n```\n\n```python\n\n\n```\n\n```python\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#default_role",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #default_role\n```\n\n```python\n\n\n```\n\n```python\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#add_function_parentheses",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #add_function_parentheses\n```\n\n```python\n\n\n```\n\n```python\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#add_module_names",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #add_module_names\n```\n\n```python\n\n\n```\n\n```python\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#show_authors",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #show_authors\n```\n\n```python\n\n\n```\n\n```python\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import pygments_style\n```\n\n```python\n\n\n```\n\n```python\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#modindex_common_prefix",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #modindex_common_prefix\n```\n\n```python\n\n\n```\n\n```python\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#keep_warnings",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #keep_warnings\n```\n\n```python\n\n\n```\n\n```python\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "html_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import html_theme\n```\n\n```python\n\n\n```\n\n```python\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_theme_options",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_theme_options\n```\n\n```python\n\n\n```\n\n```python\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_theme_path",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_theme_path\n```\n\n```python\n\n\n```\n\n```python\n#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_favicon",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_favicon\n```\n\n```python\n\n\n```\n\n```python\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import html_static_path\n```\n\n```python\n\n\n```\n\n```python\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_extra_path",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_extra_path\n```\n\n```python\n\n\n```\n\n```python\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_last_updated_fmt",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_last_updated_fmt\n```\n\n```python\n\n\n```\n\n```python\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_use_smartypants",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_use_smartypants\n```\n\n```python\n\n\n```\n\n```python\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_sidebars",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_sidebars\n```\n\n```python\n\n\n```\n\n```python\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_additional_pages",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_additional_pages\n```\n\n```python\n\n\n```\n\n```python\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_domain_indices",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_domain_indices\n```\n\n```python\n\n\n```\n\n```python\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_use_index",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_use_index\n```\n\n```python\n\n\n```\n\n```python\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_split_index",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_split_index\n```\n\n```python\n\n\n```\n\n```python\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_show_sourcelink",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_show_sourcelink\n```\n\n```python\n\n\n```\n\n```python\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_show_sphinx",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_show_sphinx\n```\n\n```python\n\n\n```\n\n```python\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_show_copyright",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_show_copyright\n```\n\n```python\n\n\n```\n\n```python\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_use_opensearch",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_use_opensearch\n```\n\n```python\n\n\n```\n\n```python\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_file_suffix",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #html_file_suffix\n```\n\n```python\n\n\n```\n\n```python\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "htmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import htmlhelp_basename\n```\n\n```python\n\n\n```\n\n```python\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "latex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import latex_elements\n```\n\n```python\n\n\n```\n\n```python\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "latex_documents = [\n  ('index', 'MockeryDocs.tex', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import latex_documents\n```\n\n```python\n\n\n```\n\n```python\nlatex_documents = [\n  ('index', 'MockeryDocs.tex', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_logo",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #latex_logo\n```\n\n```python\n\n\n```\n\n```python\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_use_parts",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #latex_use_parts\n```\n\n```python\n\n\n```\n\n```python\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_show_pagerefs",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #latex_show_pagerefs\n```\n\n```python\n\n\n```\n\n```python\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_show_urls",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #latex_show_urls\n```\n\n```python\n\n\n```\n\n```python\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_appendices",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #latex_appendices\n```\n\n```python\n\n\n```\n\n```python\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_domain_indices",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #latex_domain_indices\n```\n\n```python\n\n\n```\n\n```python\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "man_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import man_pages\n```\n\n```python\n\n\n```\n\n```python\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#man_show_urls",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'MockeryDocs', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'MockeryDocs', 'One line description of project.',\n   'Miscellaneous'),\n]",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #man_show_urls\n```\n\n```python\n\n\n```\n\n```python\n#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'MockeryDocs', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'MockeryDocs', 'One line description of project.',\n   'Miscellaneous'),\n]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "texinfo_documents = [\n  ('index', 'MockeryDocs', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'MockeryDocs', 'One line description of project.',\n   'Miscellaneous'),\n]\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import texinfo_documents\n```\n\n```python\n\n\n```\n\n```python\ntexinfo_documents = [\n  ('index', 'MockeryDocs', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'MockeryDocs', 'One line description of project.',\n   'Miscellaneous'),\n]\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#texinfo_appendices",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #texinfo_appendices\n```\n\n```python\n\n\n```\n\n```python\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#texinfo_domain_indices",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #texinfo_domain_indices\n```\n\n```python\n\n\n```\n\n```python\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#texinfo_show_urls",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print sphinx_rtd_theme.get_html_theme_path()",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #texinfo_show_urls\n```\n\n```python\n\n\n```\n\n```python\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print sphinx_rtd_theme.get_html_theme_path()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#texinfo_no_detailmenu",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print sphinx_rtd_theme.get_html_theme_path()\n# load PhpLexer\nfrom sphinx.highlighting import lexers",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import #texinfo_no_detailmenu\n```\n\n```python\n\n\n```\n\n```python\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print sphinx_rtd_theme.get_html_theme_path()\n# load PhpLexer\nfrom sphinx.highlighting import lexers\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "on_rtd",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "on_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print sphinx_rtd_theme.get_html_theme_path()\n# load PhpLexer\nfrom sphinx.highlighting import lexers\nfrom pygments.lexers.web import PhpLexer\n# enable highlighting for PHP code not between <?php ... ?> by default",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import on_rtd\n```\n\n```python\n\n\n```\n\n```python\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print sphinx_rtd_theme.get_html_theme_path()\n# load PhpLexer\nfrom sphinx.highlighting import lexers\nfrom pygments.lexers.web import PhpLexer\n# enable highlighting for PHP code not between <?php ... ?> by default\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lexers['php']",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "lexers['php'] = PhpLexer(startinline=True)\nlexers['php-annotations'] = PhpLexer(startinline=True)",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import lexers['php']\n```\n\n```python\n\n\n```\n\n```python\nlexers['php'] = PhpLexer(startinline=True)\nlexers['php-annotations'] = PhpLexer(startinline=True)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lexers['php-annotations']",
        "kind": 5,
        "importPath": "vendor.mockery.mockery.docs.conf",
        "description": "vendor.mockery.mockery.docs.conf",
        "peekOfCode": "lexers['php-annotations'] = PhpLexer(startinline=True)",
        "detail": "vendor.mockery.mockery.docs.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.mockery.mockery.docs.conf import lexers['php-annotations']\n```\n\n```python\n\n\n```\n\n```python\nlexers['php-annotations'] = PhpLexer(startinline=True)\n```\n",
            "supportThemeIcons": false
        }
    }
]